// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A Register
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=outMux1);
    Not(in=instruction[15], out=notInsA);
    Or(a=notInsA, b=instruction[5], out=loadA);
    // Register(in=outMux1, load=loadA, out=outA, out[0..14]=addressM);
    ARegister(in=outMux1, load=loadA, out=outA, out[0..14]=addressM);
    Mux16(a=outA, b=inM, sel=instruction[12], out=outMux2);

    ALU(x=outD, y=outMux2, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=outM, out=outALU,
        zr=outZR, ng=outNG);

    // D Register
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=outD);
    // Register(in=outALU, load=loadD, out=outD);

    // Write M
    And(a=instruction[3], b=instruction[15], out=writeM);

    // PC load logic
    Not(in=outZR, out=notOutZR);
    Not(in=outNG, out=notOutNG);
    And(a=notOutZR, b=notOutNG, out=loadJGT);
    Or(a=outZR, b=outNG, out=loadJLE);

    Mux(a=false, b=loadJGT, sel=instruction[0], out=loadPC1);
    Mux(a=outZR, b=notOutNG, sel=instruction[0], out=loadPC2);
    Mux(a=outNG, b=notOutZR, sel=instruction[0], out=loadPC3);
    Mux(a=loadJLE, b=true, sel=instruction[0], out=loadPC4);
    Mux(a=loadPC1, b=loadPC2, sel=instruction[1], out=loadPC5);
    Mux(a=loadPC3, b=loadPC4, sel=instruction[1], out=loadPC6);
    Mux(a=loadPC5, b=loadPC6, sel=instruction[2], out=loadPC7);
    And(a=loadPC7, b=instruction[15], out=loadPC);

    // PC
    PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}




















